name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Testing Jobs
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, security]
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: 📦 Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: 🧪 Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        make test
        
    - name: 🔧 Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        docker compose -f docker-compose.test.yml up -d
        make test-integration
        docker compose -f docker-compose.test.yml down
        
    - name: 🔒 Security Scan
      if: matrix.test-type == 'security'
      run: |
        # Dependency vulnerability scan
        go mod download
        go list -json -m all | nancy sleuth
        
        # Docker image security scan
        docker build -t test-image .
        trivy image test-image

  # 🔍 Code Quality
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: 🔍 Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        
    - name: 📊 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🚀 Performance Testing
  performance:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Start Formance Stack
      run: |
        docker compose up -d
        sleep 30 # Wait for services to be ready
        
    - name: 🚀 Run Load Tests
      run: |
        cd tests/loadtesting
        npm install
        npm run test
        
    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/loadtesting/results/

  # 🏗️ Build and Deploy
  build:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    environment: staging
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Staging
      run: |
        echo "Deploying to staging environment"
        # Add your deployment scripts here
        
  # 📋 Security Scan
  security:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: go, javascript
        
    - name: 🔒 Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: 🔒 Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

  # 📊 Dependency Check
  dependency-check:
    name: 📊 Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 📊 Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'formance-stack'
        path: '.'
        format: 'ALL'
        
    - name: 📊 Upload Dependency Check Results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/